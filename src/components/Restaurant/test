import React, { Component } from "react";
import { Animated, ImageBackground, Dimensions, Platform, Text, TouchableOpacity, View } from "react-native";
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { NavigationContainer } from '@react-navigation/native';

function Settings() {
    return (
        <View>
            <Text>Settings</Text>
        </View>
    );
}
function Second() {
    return (
        <View>
            <Text>Second</Text>
        </View>

    );
}
function First() {
    return (
        <View>
            <Text>First</Text>
        </View>

    );
}
function Four() {
    return (
        <View>
            <Text>Four</Text>
        </View>

    );
}
function Five() {
    return (
        <View>
            <Text>Five</Text>
        </View>

    );
}

const { width: SCREEN_WIDTH } = Dimensions.get("window");
const IMAGE_HEIGHT = 150;
const HEADER_HEIGHT = Platform.OS === "ios" ? 64 : 50;
const SCROLL_HEIGHT = IMAGE_HEIGHT - HEADER_HEIGHT;
const THEME_COLOR = "green";
const FADED_THEME_COLOR = "rgba(85,186,255, 0.8)";

export default class Restaurant extends Component {
    nScroll = new Animated.Value(0);
    scroll = new Animated.Value(0);
    textColor = this.scroll.interpolate({
        inputRange: [0, SCROLL_HEIGHT / 5, SCROLL_HEIGHT],
        outputRange: [THEME_COLOR, FADED_THEME_COLOR, "white"],
        extrapolate: "clamp"
    });
    tabBg = this.scroll.interpolate({
        inputRange: [0, SCROLL_HEIGHT],
        outputRange: ["white", THEME_COLOR],
        extrapolate: "clamp"
    });
    tabY = this.nScroll.interpolate({
        inputRange: [0, SCROLL_HEIGHT, SCROLL_HEIGHT + 1],
        outputRange: [0, 0, 1]
    });
    headerBg = this.scroll.interpolate({
        inputRange: [0, SCROLL_HEIGHT, SCROLL_HEIGHT + 1],
        outputRange: ["transparent", "transparent", THEME_COLOR],
        extrapolate: "clamp"
    });
    imgScale = this.nScroll.interpolate({
        inputRange: [-25, 0],
        outputRange: [1.1, 1],
        extrapolateRight: "clamp"
    });
    imgOpacity = this.nScroll.interpolate({
        inputRange: [0, SCROLL_HEIGHT],
        outputRange: [1, 0],
    });

    constructor(props) {
        super(props);
        this.nScroll.addListener(Animated.event([{ value: this.scroll }], { useNativeDriver: false }));
    }

    render() {
        return (
            <View>
                <Animated.View style={{ position: "absolute", width: "100%", height: "50%", backgroundColor: this.headerBg, zIndex: 1 }}>
                    <View style={{ width: "100%", height: "50%", zIndex: 1 }}>


                        <NavigationContainer>
                            <Tab />
                        </NavigationContainer>
                    </View>
                </Animated.View>
                <Animated.ScrollView
                    scrollEventThrottle={5}
                    showsVerticalScrollIndicator={false}
                    onScroll={Animated.event([{ nativeEvent: { contentOffset: { y: this.nScroll } } }], { useNativeDriver: true })}
                    style={{ zIndex: 0 }}>
                    <Animated.View style={{
                        transform: [{ translateY: Animated.multiply(this.nScroll, 0.35) }, { scale: this.imgScale }],
                        // backgroundColor: THEME_COLOR
                    }}>
                        <Animated.Image
                            source={{ uri: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Moraine_Lake_17092005.jpg" }}
                            style={{ height: IMAGE_HEIGHT, width: "100%", opacity: this.imgOpacity }}>


                        </Animated.Image>
                    </Animated.View>
                    <View style={{ height: 1000 }}>
                        <Animated.View style={{ position: "absolute", width: "100%", height: "10%", backgroundColor: this.headerBg, zIndex: 1 }}>
                            <NavigationContainer>
                                <Tab />
                            </NavigationContainer>
                        </Animated.View>
                    </View>
                </Animated.ScrollView>
            </View>
        )
    }
}

class Tab extends Component {
    constructor(props) {
        super(props);
        this.state = {

        };
    }


    render() {
        const Tab = createMaterialTopTabNavigator();
        // const { navigate } = this.props.navigation;


        return (
            <View style={{ flex: 1 }}>
                <Tab.Navigator
                    tabBarOptions={{
                        activeTintColor: "blue",
                        inactiveTintColor: "red",
                        allowFontScaling: true,
                        labelStyle: { fontSize: 16, paddingTop: 5 },
                        tabStyle: { alignSelf: "center" },
                        style: { height: 60, backgroundColor: "pink", borderTopColor: "gray" },
                    }}

                >
                    <Tab.Screen name="Home" component={First}

                    />
                    <Tab.Screen name="Five" component={Five} />

                    <Tab.Screen name="three" component={Settings} />
                    <Tab.Screen name="four" component={Four} />
                </Tab.Navigator>
            </View>
        );
    }
}




import React, { Component } from 'react';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { NavigationContainer } from '@react-navigation/native';
import {
    View,
    Text,
    StyleSheet,
    ScrollView, TouchableOpacity,
    Image,
    Animated
} from 'react-native';

HEADER_MAX_HEIGHT = 190;
HEADER_MIN_HEIGHT = 70;
PROFILE_IMAGE_MAX_HEIGHT = 80;
PROFILE_IMAGE_MIN_HEIGHT = 40;

class App extends Component {
    constructor(props) {
        super(props);

        this.state = {
            scrollY: new Animated.Value(0)
        };
    }
    render() {
        const headerHeight = this.state.scrollY.interpolate({
            inputRange: [0, HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT],
            outputRange: [HEADER_MAX_HEIGHT, HEADER_MIN_HEIGHT],
            extrapolate: 'clamp'
        });


        const profileImageMarginTop = this.state.scrollY.interpolate({
            inputRange: [0, HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT],
            outputRange: [
                HEADER_MAX_HEIGHT - PROFILE_IMAGE_MAX_HEIGHT / 2,
                HEADER_MAX_HEIGHT + 5
            ],
            extrapolate: 'clamp'
        });
        const headerZindex = this.state.scrollY.interpolate({
            inputRange: [0, HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT, 120],
            outputRange: [0, 0, 100],
            extrapolate: 'clamp'
        });

        const headerTitleBottom = this.state.scrollY.interpolate({
            inputRange: [
                0,
                HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT,
                HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT + 5 + PROFILE_IMAGE_MIN_HEIGHT,
                HEADER_MAX_HEIGHT -
                HEADER_MIN_HEIGHT +
                5 +
                PROFILE_IMAGE_MIN_HEIGHT +
                26
            ],
            outputRange: [-20, -20, -20, -20],
            extrapolate: 'clamp'
        });

        return (
            <View style={{ flex: 1 }}>
                <Animated.View
                    style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        backgroundColor: 'blue',
                        height: headerHeight,
                        zIndex: headerZindex,
                        elevation: headerZindex, //required for android
                        alignItems: 'center'
                    }}
                >
                    <Animated.View
                        style={{ position: 'absolute', bottom: headerTitleBottom }}
                    >
                        <View style={{ backgroundColor: "red", width: "100%" }}>
                            <NavigationContainer>

                                <Tab />
                            </NavigationContainer>

                            <Text style={{ color: 'red', fontSize: 14, fontWeight: 'bold' }}>
                                Varun Nath anas
            </Text>
                        </View>

                    </Animated.View>
                </Animated.View>

                <ScrollView
                    style={{ flex: 1 }}
                    scrollEventThrottle={16}
                    onScroll={Animated.event([
                        { nativeEvent: { contentOffset: { y: this.state.scrollY } } }
                    ])}
                >

                    <View>

                        <Text style={{ color: 'red', fontSize: 14, fontWeight: 'bold' }}>
                            anas
            </Text>
                    </View>

                    <View style={{ height: 1000 }} />
                </ScrollView>
            </View>
        );
    }
}
export default App;

class Tab extends Component {
    constructor(props) {
        super(props);
        this.state = {

        };
    }


    render() {
        const Tab = createMaterialTopTabNavigator();
        // const { navigate } = this.props.navigation;


        return (
            <View style={{ flex: 1 }}>
                <Tab.Navigator
                    tabBarOptions={{
                        activeTintColor: "blue",
                        inactiveTintColor: "red",
                        allowFontScaling: true,
                        labelStyle: { fontSize: 16, paddingTop: 5 },
                        tabStyle: { alignSelf: "center" },
                        style: { height: 60, backgroundColor: "pink", borderTopColor: "gray" },
                    }}

                >
                    <Tab.Screen name="Home" component={First}

                    />
                    <Tab.Screen name="Five" component={Five} />

                    <Tab.Screen name="three" component={Settings} />
                    <Tab.Screen name="four" component={Four} />
                </Tab.Navigator>
            </View>
        );
    }
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center'
    }
});
function Settings() {
    return (
        <View>
            <Text>Settings</Text>
        </View>
    );
}
function Second() {
    return (
        <View>
            <Text>Second</Text>
        </View>

    );
}
function First() {
    return (
        <View>
            <Text>First</Text>
        </View>

    );
}
function Four() {
    return (
        <View>
            <Text>Four</Text>
        </View>

    );
}
function Five() {
    return (
        <View>
            <Text>Five</Text>
        </View>

    );
}
